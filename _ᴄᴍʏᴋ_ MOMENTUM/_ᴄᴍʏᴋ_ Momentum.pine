//@version = 4
//                                                                              STUDY/STRATEGY SETTINGS
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
strategy( title="Momentum Index" , shorttitle="𝗠𝗼𝗺𝗲𝗻𝘁𝘂𝗺" , overlay=false , format=format.price , precision=1 ,initial_capital=100)
//                                                                              COLORSPACE
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
invisible		        = #00000000
//                                                                              INPUTS
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
//                                                              MODUS
//▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
MODUS                   = input(title="Display", defval="Scope", options=["Scope", "Weighting", "Position"])

//                                                              TIME
//▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
//TIME_SESSION            = input("0",type=input.session, title = "Sessions")
TIME_DATE_START         = input(defval = timestamp("21 May 2021 12:00 +0000"), title = "Start Time", type = input.time)
TIME_DATE_END           = input(defval = timestamp("16 Aug 2021 00:00 +0000"), title = "End Time", type = input.time)
    
TIME_ALLOW = time >= TIME_DATE_START and time <= TIME_DATE_END //and time(timeframe.period, TIME_SESSION)

//                                                              SCOPE
//▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
SCOPE_GRADATION         = input( defval="Logarithmic"    , options=["Linear", "Logarithmic"]                                    , title="Scalar Gradation"      )
SCOPE_RATIO			    = input( defval=1.2         , minval=1.000              , step=0.005            , type=input.float      , title="Scalar Ratio"          )	
SCOPE_MAX               = input( defval=4400.0      , minval=128.0              , step=100.0            , type=input.float      , title="Scalar Maximum"        ) * SCOPE_RATIO
SCOPE_MIN               = iff( SCOPE_GRADATION == "Linear" , SCOPE_MAX / 32 , SCOPE_MAX / pow( SCOPE_RATIO , 32 ) )

SCOPE_HI			    = input( defval=0.25         , minval=0.0                , step=0.05             , type=input.float      , title="Scalar High"           )
SCOPE_LO			    = input( defval=-0.25        , maxval=0.0                , step=0.05             , type=input.float      , title="Scalar Low"            )


//                                                                              FUNCTIONS
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
//                                                              AVERAGING
//▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
//                      ROLLING MOVING AVERAGE
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
RMA( SERIES , LENGHT )=>
	ALPHA               = 1 / LENGHT
    float SUM           = na
    SUM                 := ALPHA * SERIES + ( 1.0 - ALPHA ) * nz( SUM[1] )
    
//                                                              INDEXING
//▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
//                      AUGMENTED RELATIVE MOMENTUM INDEX
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
ARMI( SOURCE , LENGHT , MOMENTUM )=> // USES LINEAR VALUES , MAKE WITH LOG VALUES LIKE CHART SCALING
    INC                 = RMA( max( SOURCE                  - sma(SOURCE,MOMENTUM*2), 0 )    , LENGHT)
    DEC                 = RMA( max( sma(SOURCE,MOMENTUM*2)  - SOURCE                , 0 )    , LENGHT)
    RMI                 = DEC   == 0.0  ? 0.0     : -(INC-DEC)/(INC+DEC)

//                                                              GRAPHICAL
//▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
//                      SCALAR Y VALUE
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
SCALAR( ITERATION )=>
    iff( SCOPE_GRADATION == "Linear" , ( SCOPE_MAX - (( SCOPE_MAX / 32 ) * ITERATION)) / SCOPE_RATIO , SCOPE_MAX / pow( SCOPE_RATIO , ITERATION ) )

//                      PIXELING
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
PIXEL( SOURCE , ITERATION )=> 
	LENGHT              = SCALAR( ITERATION )
	return              = ARMI( SOURCE , LENGHT , int( LENGHT / 10 ) )

//                      SHADING
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
SHADE(x)=>
    out                 = x>0.96875?#ffa9e0FF:x>0.9375?#ffa6dcF0:x>0.90625?#fe9ed8E8:x>0.875?#fc97d1E0:x>0.84375?#fa90caD8:x>0.8125?#fa8bc3D0:x>0.78125?#f37db0C8:x>0.75?#ee74a3C0:x>0.71875?#e96d98B8:x>0.6875?#e46890B0:x>0.65625?#db6083A8:x>0.625?#d65a7aA0:x>0.59375?#cb506c98:x>0.5625?#c44a6390:x>0.53125?#ba465b88:x>0.5?#b6475a80:x>0.46875?#b14a5d78:x>0.4375?#ae4d5e70:x>0.40625?#aa506168:x>0.375?#a7536360:x>0.34375?#a3576658:x>0.3125?#9f5a6750:x>0.28125?#9b5e6a48:x>0.25?#97616c40:x>0.21875?#94646d38:x>0.1875?#8f677030:x>0.15625?#8c6a7128:x>0.125?#896d7220:x>0.09375?#86707518:x>0.0625?#84737610:x>0.03125?#80767908:x<-0.96875?#b9fdceFF:x<-0.9375?#affcc9F0:x<-0.90625?#a6fac5E8:x<-0.875?#9cf7c1E0:x<-0.84375?#90f3baD8:x<-0.8125?#87f0b6D0:x<-0.78125?#7aeab1C8:x<-0.75?#71e5adC0:x<-0.71875?#67e0abB8:x<-0.6875?#5dd9a4B0:x<-0.65625?#55d29fA8:x<-0.625?#50cc9dA0:x<-0.59375?#4ac59a98:x<-0.5625?#46be9790:x<-0.53125?#44b79588:x<-0.5?#48b39480:x<-0.46875?#4baf9278:x<-0.4375?#4fab9070:x<-0.40625?#52a88f68:x<-0.375?#55a48e60:x<-0.34375?#599f8c58:x<-0.3125?#5d9c8b50:x<-0.28125?#60988948:x<-0.25?#63938740:x<-0.21875?#678f8438:x<-0.1875?#67908530:x<-0.15625?#6e888128:x<-0.125?#6e888120:x<-0.09375?#74827f18:x<-0.0625?#75817d10:x<-0.03125?#7b7b7b08:invisible

//                                                              VALUATION
//▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
//                      GRADING
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
GRADE( iterate )=>
    iterate == 1 ? 2 : iterate == 2 ? 2.4 : iterate == 3 ? 2.8 : iterate == 4 ? 3.2 : iterate == 5 ? 3.4 : iterate == 6 ? 3.2 : iterate == 7 ? 3.0 : iterate == 8 ? 2.8 : iterate == 9 ? 2.6 : iterate == 10 ? 2.4 : iterate == 11 ? 2.2 : iterate == 12 ? 2.0 : iterate == 13 ? 1.85 : iterate == 12 ? 1.7 : iterate == 13 ? 1.6 : iterate == 12 ? 1.4 : iterate == 13 ? 1.3 : iterate == 14 ? 1.1 : iterate == 15 ? 1 : iterate == 16 ? 0.9 : iterate == 17 ? 0.8 : iterate == 18 ? 0.7 : iterate == 19 ? 0.6 : iterate == 20 ? 0.5 : iterate == 21 ? 0.4 : iterate == 22 ? 0.3 : iterate == 23 ? 0.2 : iterate == 24 ? 0.1 : iterate > 24 ? 0 : 0
    
//                      VALUATE
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
VALUATE( Series )=>
    floorvalue = 0.0
    posvalue = 0.0
    negvalue = 0.0
    
    for i=1 to 25
        a = PIXEL( close , i )
        posvalue := posvalue + ( (a>0?a:0) * GRADE(i) )
        negvalue := negvalue + ( (a<0?a:0) * GRADE(i) )
        
    floorvalue := PIXEL( close , 32 ) > 0 ? pow(posvalue,2) : - pow(negvalue,2)

//                                                                              STRATEGY
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
//                                                              WEIGHTING
//▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
XVAL                            = -VALUATE(close)                               // NEEDS TO VALUATE FROM NEUTRAL TO UP, NOT ALL

PVAL                            = plot(XVAL, color=color.gray,title='VALUE')
ZVAL                            = plot(0,color=#000000CC)
ICOL                            = XVAL > 0 ? color.green : color.red
fill( PVAL , ZVAL , color=ICOL)

//                                                              TRIGGERING
//▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

PULSE                           = PIXEL( close , 32 )
LONG                            = PULSE > SCOPE_HI ? true : false
SHORT                           = PULSE < SCOPE_LO ? true : false


plotshape(LONG, color=color.green, style=shape.triangleup,size=size.tiny, location=location.bottom)
plotshape(SHORT, color=color.red, style=shape.triangledown,size=size.tiny, location=location.bottom)

//                                                              BALANCING
//▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

float CONTRACTS_OPEN_DENOM      = na
CONTRACTS_OPEN_DENOM            := nz(CONTRACTS_OPEN_DENOM[1])

float CONTRACTS_OPEN_NOM        = na
CONTRACTS_OPEN_NOM              := nz(CONTRACTS_OPEN_NOM[1])

CONTRACTS_OPEN_MAXIMUM          = strategy.initial_capital

CONTRACTS_OPEN_LONG_CORRECTION  = CONTRACTS_OPEN_DENOM > 0 ? 1 / ( CONTRACTS_OPEN_DENOM + 1 ) : 1
CONTRACTS_OPEN_SHORT_CORRECTION = CONTRACTS_OPEN_DENOM < 0 ? 1 / (-CONTRACTS_OPEN_DENOM + 1 ) : 1

XVAL                            := XVAL > CONTRACTS_OPEN_MAXIMUM ? CONTRACTS_OPEN_MAXIMUM / 10 : XVAL

//                                                              POSITIONING
//▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

AVG_POSITION_PRICE          = abs(CONTRACTS_OPEN_DENOM) / CONTRACTS_OPEN_NOM

//                                                              EXECUTION
//▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
    
if ( LONG and TIME_ALLOW)
    CONTRACTS_OPEN_DENOM        := CONTRACTS_OPEN_DENOM - ( XVAL * CONTRACTS_OPEN_LONG_CORRECTION )
    CONTRACTS_OPEN_NOM          := CONTRACTS_OPEN_NOM + ( abs(XVAL * CONTRACTS_OPEN_LONG_CORRECTION ) / close )
    CONTRACTS_OPEN_LONG_NOM     = abs(XVAL * CONTRACTS_OPEN_LONG_CORRECTION ) / close
    strategy.order  ("long",true,CONTRACTS_OPEN_LONG_NOM)

if ( SHORT and TIME_ALLOW)
    CONTRACTS_OPEN_DENOM        := CONTRACTS_OPEN_DENOM - ( XVAL * CONTRACTS_OPEN_SHORT_CORRECTION)
    CONTRACTS_OPEN_NOM          := CONTRACTS_OPEN_NOM - ( abs(XVAL * CONTRACTS_OPEN_SHORT_CORRECTION ) / close )
    CONTRACTS_OPEN_SHORT_NOM    = abs(XVAL * CONTRACTS_OPEN_SHORT_CORRECTION) / close
    strategy.order  ("short",false,CONTRACTS_OPEN_SHORT_NOM)

plot(CONTRACTS_OPEN_DENOM,color=#008888CC,style= plot.style_stepline)
plot(CONTRACTS_OPEN_NOM*20000,color=#880088CC,style= plot.style_stepline)



//                                                                              VISUALIZATION
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
//                                                              FULLSCOPE
//▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
//                      LINES
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
// P32 = plot( SCALAR( 1 ) , color = invisible , editable = false )
// P31 = plot( SCALAR( 2 ) , color = invisible , editable = false )
// P30 = plot( SCALAR( 3 ) , color = invisible , editable = false )
// P29 = plot( SCALAR( 4 ) , color = invisible , editable = false )
// P28 = plot( SCALAR( 5 ) , color = invisible , editable = false )
// P27 = plot( SCALAR( 6 ) , color = invisible , editable = false )
// P26 = plot( SCALAR( 7 ) , color = invisible , editable = false )
// P25 = plot( SCALAR( 8 ) , color = invisible , editable = false )
// P24 = plot( SCALAR( 9 ) , color = invisible , editable = false )
// P23 = plot( SCALAR( 10 ) , color = invisible , editable = false )
// P22 = plot( SCALAR( 11 ) , color = invisible , editable = false )
// P21 = plot( SCALAR( 12 ) , color = invisible , editable = false )
// P20 = plot( SCALAR( 13 ) , color = invisible , editable = false )
// P19 = plot( SCALAR( 14 ) , color = invisible , editable = false )
// P18 = plot( SCALAR( 15 ) , color = invisible , editable = false )
// P17 = plot( SCALAR( 16 ) , color = invisible , editable = false )
// P16 = plot( SCALAR( 17 ) , color = invisible , editable = false )
// P15 = plot( SCALAR( 18 ) , color = invisible , editable = false )
// P14 = plot( SCALAR( 19 ) , color = invisible , editable = false )
// P13 = plot( SCALAR( 20 ) , color = invisible , editable = false )
// P12 = plot( SCALAR( 21 ) , color = invisible , editable = false )
// P11 = plot( SCALAR( 22 ) , color = invisible , editable = false )
// P10 = plot( SCALAR( 23 ) , color = invisible , editable = false )
// P09 = plot( SCALAR( 24 ) , color = invisible , editable = false )
// P08 = plot( SCALAR( 25 ) , color = invisible , editable = false )
// P07 = plot( SCALAR( 26 ) , color = invisible , editable = false )
// P06 = plot( SCALAR( 27 ) , color = invisible , editable = false )
// P05 = plot( SCALAR( 28 ) , color = invisible , editable = false )
// P04 = plot( SCALAR( 29 ) , color = invisible , editable = false )
// P03 = plot( SCALAR( 30 ) , color = invisible , editable = false )
// P02 = plot( SCALAR( 31 ) , color = invisible , editable = false )
// P01 = plot( SCALAR( 32 ) , color = invisible , editable = false )

//                      FILLS
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
// fill( P32 , P31 , color = SHADE( PIXEL( close , 1 ) ) , editable = false )
// fill( P31 , P30 , color = SHADE( PIXEL( close , 2 ) ) , editable = false )
// fill( P30 , P29 , color = SHADE( PIXEL( close , 3 ) ) , editable = false )
// fill( P29 , P28 , color = SHADE( PIXEL( close , 4 ) ) , editable = false )
// fill( P28 , P27 , color = SHADE( PIXEL( close , 5 ) ) , editable = false )
// fill( P27 , P26 , color = SHADE( PIXEL( close , 6 ) ) , editable = false )
// fill( P26 , P25 , color = SHADE( PIXEL( close , 7 ) ) , editable = false )
// fill( P25 , P24 , color = SHADE( PIXEL( close , 8 ) ) , editable = false )
// fill( P24 , P23 , color = SHADE( PIXEL( close , 9 ) ) , editable = false )
// fill( P23 , P22 , color = SHADE( PIXEL( close , 10 ) ) , editable = false )
// fill( P22 , P21 , color = SHADE( PIXEL( close , 11 ) ) , editable = false )
// fill( P21 , P20 , color = SHADE( PIXEL( close , 12 ) ) , editable = false )
// fill( P20 , P19 , color = SHADE( PIXEL( close , 13 ) ) , editable = false )
// fill( P19 , P18 , color = SHADE( PIXEL( close , 14 ) ) , editable = false )
// fill( P18 , P17 , color = SHADE( PIXEL( close , 15 ) ) , editable = false )
// fill( P17 , P16 , color = SHADE( PIXEL( close , 16 ) ) , editable = false )
// fill( P16 , P15 , color = SHADE( PIXEL( close , 17 ) ) , editable = false )
// fill( P15 , P14 , color = SHADE( PIXEL( close , 18 ) ) , editable = false )
// fill( P14 , P13 , color = SHADE( PIXEL( close , 19 ) ) , editable = false )
// fill( P13 , P12 , color = SHADE( PIXEL( close , 20 ) ) , editable = false )
// fill( P12 , P11 , color = SHADE( PIXEL( close , 21 ) ) , editable = false )
// fill( P11 , P10 , color = SHADE( PIXEL( close , 22 ) ) , editable = false )
// fill( P10 , P09 , color = SHADE( PIXEL( close , 23 ) ) , editable = false )
// fill( P09 , P08 , color = SHADE( PIXEL( close , 24 ) ) , editable = false )
// fill( P08 , P07 , color = SHADE( PIXEL( close , 25 ) ) , editable = false )
// fill( P07 , P06 , color = SHADE( PIXEL( close , 26 ) ) , editable = false )
// fill( P06 , P05 , color = SHADE( PIXEL( close , 27 ) ) , editable = false )
// fill( P05 , P04 , color = SHADE( PIXEL( close , 28 ) ) , editable = false )
// fill( P04 , P03 , color = SHADE( PIXEL( close , 29 ) ) , editable = false )
// fill( P03 , P02 , color = SHADE( PIXEL( close , 30 ) ) , editable = false )
// fill( P02 , P01 , color = SHADE( PIXEL( close , 31 ) ) , editable = false )

//                      BACKGROUND
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
//bgcolor( #66666600 , title = "Background" , editable = true)
